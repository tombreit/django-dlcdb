# Generated by Django 4.0.2 on 2022-02-21 10:37

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tenants', '0003_alter_tenant_options'),
        ('core', '0018_remove_saplistcomparisonresult_sap_list_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalDevice',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('username', models.CharField(blank=True, max_length=255, verbose_name='Benutzername (denormalized)')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Erstellt')),
                ('modified_at', models.DateTimeField(blank=True, editable=False, verbose_name='Geändert')),
                ('deleted_at', models.DateTimeField(editable=False, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('edv_id', models.CharField(blank=True, db_index=True, max_length=512, null=True, verbose_name='EDV-Nummer')),
                ('sap_id', models.CharField(blank=True, db_index=True, help_text='Format: `Hauptnummer-Unternummer`. Für Anlagen die ausschließlich eine Hauptnummer besitzen, ist die 0 (Null) als Unternummer einzutragen.', max_length=30, null=True, validators=[django.core.validators.RegexValidator(code='invalid_sap_id', message='SAP-ID muss als Hauptnummer-Unternummer eingegeben werden.', regex='^[0-9]+-[0-9]+$')], verbose_name='SAP-Nummer')),
                ('serial_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Seriennummer')),
                ('manufacturer', models.CharField(blank=True, max_length=255, null=True, verbose_name='Hersteller')),
                ('series', models.CharField(blank=True, max_length=255, null=True, verbose_name='Modelbezeichnung')),
                ('is_licence', models.BooleanField(db_index=True, default=False, verbose_name='Ist Lizenz?')),
                ('purchase_date', models.DateField(blank=True, null=True, verbose_name='Kaufdatum')),
                ('warranty_expiration_date', models.DateField(blank=True, null=True, verbose_name='Garantieablaufdatum')),
                ('maintenance_contract_expiration_date', models.DateField(blank=True, null=True, verbose_name='Ablaufdatum Lizenz- oder Wartungsvertrag')),
                ('cost_centre', models.CharField(blank=True, max_length=255, null=True, verbose_name='Kostenstelle')),
                ('book_value', models.CharField(blank=True, max_length=255, null=True, verbose_name='Buchwert')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Notiz')),
                ('mac_address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Haupt-Mac-Adresse')),
                ('extra_mac_addresses', models.TextField(blank=True, null=True, verbose_name='Weitere Mac-Adressen')),
                ('nick_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nickname / C-Name')),
                ('former_nick_names', models.CharField(blank=True, help_text='Komma-separierte Eingabe bitte', max_length=255, null=True, verbose_name='Vorherige Nicknames / C-Names')),
                ('is_legacy', models.BooleanField(default=False, verbose_name='Legacy-Device')),
                ('is_lentable', models.BooleanField(default=False, verbose_name='Verleihgerät')),
                ('is_deinventorized', models.BooleanField(default=False, verbose_name='Deinventarisiert')),
                ('has_malfunction', models.BooleanField(default=False, verbose_name='Gerät defekt')),
                ('is_imported', models.BooleanField(default=False, verbose_name='Via CSV-Import angelegt?')),
                ('qrcode', models.TextField(blank=True, max_length=100, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('active_record', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.record')),
                ('deleted_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('device_type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.devicetype', verbose_name='Geräte-Typ')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('imported_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.importerlist', verbose_name='Importiert via')),
                ('supplier', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.supplier', verbose_name='Zulieferer')),
                ('tenant', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tenants.tenant')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Device',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
